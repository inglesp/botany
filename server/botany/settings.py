"""
Django settings for botany project.

Generated by 'django-admin startproject' using Django 2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
from datetime import datetime, timedelta, timezone

import dj_database_url

bst = timezone(timedelta(hours=1))

# Game settings
BOTANY_GAME_MODULE = os.environ["BOTANY_GAME_MODULE"]
BOTANY_GAME_PACKAGE = os.environ["BOTANY_GAME_PACKAGE"]
BOTANY_NUM_ROUNDS = int(os.environ["BOTANY_NUM_ROUNDS"])
BOTANY_OPCODE_LIMIT = int(os.environ["BOTANY_OPCODE_LIMIT"])

# TODO read this from environment (and make optional)
BOTANY_TOURNAMENT_CLOSE_AT = datetime(2018, 9, 18, 14, 30, tzinfo=bst)

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ["SECRET_KEY"]

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(os.environ.get("DEBUG", False))

if DEBUG:
    ALLOWED_HOSTS = ["*"]
else:
    ALLOWED_HOSTS = ["botany18.pyconuk.org"]


AUTH_LOGIN_URL = os.environ["AUTH_LOGIN_URL"]
AUTH_SECRET_KEY = os.environ["AUTH_SECRET_KEY"]
AUTH_MAX_AGE = 10

USE_FAKE_AUTH = bool(os.getenv("USE_FAKE_AUTH"))


# Application definition

INSTALLED_APPS = [
    "botany",
    "django_rq",
    "raven.contrib.django.raven_compat",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

if USE_FAKE_AUTH:
    INSTALLED_APPS.append("fakeauth")

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "botany.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ]
        },
    }
]

WSGI_APPLICATION = "botany.wsgi.application"


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {"default": dj_database_url.config()}


# Queues
# https://github.com/rq/django-rq

USE_QUEUES = not bool(os.getenv("DONT_USE_QUEUES"))

QUEUE_CONFIG = {"URL": os.environ["REDIS_URL"]}

RQ_QUEUES = {"house": QUEUE_CONFIG, "main": QUEUE_CONFIG}


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]


# Custom User model

AUTH_USER_MODEL = "botany.User"


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = "en-gb"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = "/static/"

STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

# Raven

RAVEN_PROJECT = os.getenv("RAVEN_PROJECT")
RAVEN_PUBLIC_KEY = os.getenv("RAVEN_PUBLIC_KEY")
RAVEN_PRIVATE_KEY = os.getenv("RAVEN_PRIVATE_KEY")

if RAVEN_PROJECT is not None:
    RAVEN_CONFIG = {
        "dsn": f"https://{RAVEN_PUBLIC_KEY}:{RAVEN_PRIVATE_KEY}@sentry.io/{RAVEN_PROJECT}"
    }
